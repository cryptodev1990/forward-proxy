#!/usr/bin/env ruby

require 'socket'
require 'webrick'
require 'net/http'

module ForwardProxy
  class HTTPMethodNotImplementedError < StandardError; end

  class Server
    def initialize(port: 9292)
      server = TCPServer.new(port)

      log("Listing :#{port}")
      
      loop do
        client = server.accept

        Thread.start(client) do |conn|
          begin
            req = parse_req(conn)
        
            log(req.request_line)
      
            case req.request_method
            when "CONNECT"
              handle_tunnel(conn, req)
            when "GET", "POST"
              handle(conn, req)
            else
              raise HTTPMethodNotImplementedError
            end
          rescue => e
            puts e.message
            puts e.backtrace.map { |line| "  #{line}"}
      
            conn.print <<~eos.chomp
            HTTP/1.1 502
            eos
          ensure
            conn.close
          end
        end
      end
    end

    private

    def transfer(dest_conn, src_conn)
      IO.copy_stream(src_conn, dest_conn)
    rescue => e
      log(e.message, "WARNING")
    end

    def handle_tunnel(client_conn, req)
      host, port = *req['Host'].split(':')
      dest_conn = TCPSocket.new(host, port)

      # https://tools.ietf.org/html/rfc7231#section-4.3.6
      client_conn.write <<~eos
      HTTP/1.1 200 OK

      eos

      [
        Thread.new { transfer(client_conn, dest_conn) },
        Thread.new { transfer(dest_conn, client_conn) }
      ].each(&:join)
    end

    def handle(conn, req)
      resp = Net::HTTP.start(req.host, req.port) do |http|
        http.request prepare_proxy_req(req)
      end

      conn.puts <<~eos.chomp
      HTTP/1.1 #{resp.code}
      #{resp.each.map { |header, value| "#{header}: #{value}" }.join("\n")}

      #{resp.body}
      eos
    end

    def prepare_proxy_req(req)
      req_headers = Hash[req.header.map { |k,v| [k,v.first] }]

      case req.request_method
      when "GET"
        Net::HTTP::Get.new(req.path, req_headers)
      else
        raise HTTPMethodNotImplementedError
      end
    end

    def parse_req(conn)
      req = WEBrick::HTTPRequest.new(WEBrick::Config::HTTP).tap do |req|
        req.parse(conn)
      end
    end

    def log(str, level = 'INFO')
      puts "[#{Time.now}] #{level} #{str}"
    end
  end
end

ForwardProxy::Server.new